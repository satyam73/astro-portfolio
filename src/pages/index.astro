---
import { getCollection } from "astro:content";
import BaseLayout from "../layouts/base-layout.astro";
import Work from "../components/work.astro";
import "../styles/global.css";
import PreviousWork from "../components/previous-work.astro";
import type { TWork } from "../types/work.type";
import { Image } from "astro:assets";

const posts = await getCollection("posts");
const companies = [
  {
    name: "HCL",
    logo: "/hcl-logo.avif",
    designation: "Software Engineer",
    duration: "2015-2018",
    id: 1,
  },
  {
    name: "Siemens AG",
    logo: "/siemens-logo.jpg",
    designation: "Senior Software Engineer ",
    duration: "2018-2019",
    id: 2,
  },
  {
    name: "KPMG",
    logo: "/kpmg-logo.png",
    designation: "Software Development Consultant",
    duration: "2019-2020",
    id: 3,
  },
  {
    name: "EY",
    logo: "/ey-logo.png",
    designation: "Senior Security Consultant",
    duration: "2020-2021",
    id: 4,
  },
  {
    name: "Boeing",
    logo: "/boeing-logo.jpg",
    designation: "Senior Software Engineer",
    duration: "2021- Present",
    id: 5,
  },
  {
    name: "",
    logo: "",
    designation: "",
    duration: "",
    id: 6,
  },
];

const workDetails: TWork[] = [
  {
    company: "Boeing",
    role: "Senior Software Developer 2",
    description:
      "Responsible for developing stable and scalable micro service. The system has a set of unique challenges from a domain and technology perspective.",
    isOnGoing: true,
    duration: {
      from: "2022-06-01",
      to: "",
    },
  },
];
---

<BaseLayout client:*>
  <div class="space-y-16 pb-24">
    <div class="pt-16 sm:pt-20">
      <h2 class="text-neutral-500 font-semibold pb-2">Work Experience</h2>
      <Work details={workDetails} />
      <PreviousWork companies={companies} />
      <br />
      <h4 style="color:white">
        I document my weekly journey through the trenches of enterprise
        application development, system design, and performance optimization. I
        share my ups and downs (mostly wins!) in various formats, including blog
        posts here and LinkedIn newsletters. Dive into some of my favorite
        exploits below!
      </h4>
    </div>
    <style>
      .libutton {
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 7px;
        text-align: center;
        outline: none;
        text-decoration: none !important;
        color: #ffffff !important;
        width: 260px;
        height: 32px;
        border-radius: 16px;
        background-color: #0a66c2;
        font-family: "SF Pro Text", Helvetica, sans-serif;
      }
    </style>
    <a
      class="libutton"
      href="https://www.linkedin.com/build-relation/newsletter-follow?entityUrn=7022684487754944512"
      target="_blank">Subscribe TechDiary on LinkedIn</a
    >
    <div>
      <h2 class="text-neutral-500 font-semibold pb-2">My thoughts</h2>
      <div class="space-y-2" id="posts">
        {
          posts.slice(0, 3).map((post) => (
            <a
              href={`/blog/${post.slug}`}
              class="flex gap-3 p-4 -mx-4 sm:gap-4 transition hover:bg-neutral-900 rounded-xl outline-none ring-2 ring-transparent focus:ring-neutral-500 focus:bg-neutral-900 shadow-sm"
            >
              <div class="w-20 h-20 shrink-0 rounded-md overflow-hidden">
                <Image
                  src={post.data.image.url}
                  alt={post.data.image.alt}
                  width={128}
                  height={128}
                  class="w-full h-full object-cover"
                />
              </div>

              <div class="space-y-2">
                <h4 class="font-semibold text-neutral-100 text-lg sm:text-xl">
                  {post.data.title}
                </h4>

                <p class="text-neutral-500">{post.data.description}</p>
              </div>
            </a>
          ))
        }
      </div>
      <div class="flex justify-between">
        <button
          id="prevButton"
          type="button"
          class="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700"
          >Prev</button
        >
        <button
          id="nextButton"
          type="button"
          class="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700"
          >Next</button
        >
      </div>
    </div>
  </div>
  <script>
    import { getCollection } from "astro:content";
    const posts = await getCollection("posts");

    const postData = {
      pageSize: 3,
      startIndex: 0,
      endIndex: 3,
      currentPage: 1,
      pageData: posts.slice(0, 3),
      totalPages: Math.ceil(posts.length / 3),
    };
    const prevButton = document.getElementById("prevButton");
    const nextButton = document.getElementById("nextButton");
    const postsContainer = document.getElementById("posts");

    function prevHandler() {
      if (postData.currentPage === 1) return;

      postData.startIndex = postData.startIndex - postData.pageSize;
      postData.endIndex = postData.endIndex - postData.pageSize;
      postData.currentPage -= 1;
      postData.pageData = posts.slice(postData.startIndex, postData.endIndex);

      renderPagePosts();
    }

    function nextHandler() {
      if (postData.currentPage === postData.totalPages) return;

      postData.startIndex = postData.startIndex + postData.pageSize;
      postData.endIndex = postData.endIndex + postData.pageSize;
      postData.currentPage += 1;
      postData.pageData = posts.slice(postData.startIndex, postData.endIndex);

      renderPagePosts();
    }
    prevButton?.addEventListener("click", prevHandler);
    nextButton?.addEventListener("click", nextHandler);

    function renderPagePosts() {
      postsContainer.innerHTML = "";
      postData.pageData.forEach((post) => {
        postsContainer.innerHTML += `<a
              href=/blog/${post.slug}
              class="flex gap-3 p-4 -mx-4 sm:gap-4 transition hover:bg-neutral-900 rounded-xl outline-none ring-2 ring-transparent focus:ring-neutral-500 focus:bg-neutral-900 shadow-sm"
            >
              <div class="w-20 h-20 shrink-0 rounded-md overflow-hidden">
                <Image
                  src=${post.data.image.url}
                  alt=${post.data.image.alt}
                  width={128}
                  height={128}
                  class="w-full h-full object-cover"
                />
              </div>

              <div class="space-y-2">
                <h4 class="font-semibold text-neutral-100 text-lg sm:text-xl">
                  ${post.data.title}
                </h4>

                <p class="text-neutral-500">${post.data.description}</p>
              </div>
            </a> `;
      });
    }

    renderPagePosts();
  </script>
</BaseLayout>
